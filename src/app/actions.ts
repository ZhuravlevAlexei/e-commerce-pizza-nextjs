'use server';

import { cookies } from 'next/headers';
import { prisma } from '@/prisma-setup/prisma-client';
import { CheckoutFormValues } from '@/shared/constants';
import { OrderStatus, Prisma } from '@prisma/client';
import { getUserSession } from '@/shared/lib/get-user-session';
import { hashSync } from 'bcrypt';

export async function createOrder(data: CheckoutFormValues) {
  try {
    const cookieStore = cookies();
    const cartToken = cookieStore.get('cartToken')?.value;

    if (!cartToken) {
      throw new Error('Cart token is not found');
    }

    /* –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω—É */
    const userCart = await prisma.cart.findFirst({
      include: {
        user: true,
        items: {
          include: {
            ingredients: true,
            productItem: {
              include: {
                product: true,
              },
            },
          },
        },
      },
      where: {
        token: cartToken,
      },
    });

    /* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (!userCart) {
      throw new Error('Cart not found');
    }

    /* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (userCart?.totalAmount === 0) {
      throw new Error('Cart is empty');
    }

    /* –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ */
    const order = await prisma.order.create({
      data: {
        token: cartToken,
        fullName: data.firstName + ' ' + data.lastName,
        email: data.email,
        phone: data.phone,
        address: data.address,
        comment: data.comment,
        totalAmount: userCart.totalAmount,
        status: OrderStatus.PENDING,
        items: JSON.stringify(userCart.items),
      },
    });

    /* –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É */
    /* –æ–±–Ω—É–ª—è–µ–º —Å—É–º–º—É */
    await prisma.cart.update({
      where: {
        id: userCart.id,
      },
      data: {
        totalAmount: 0,
      },
    });
    /* –∏ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π —Ç–æ–≤–∞—Ä—ã */
    await prisma.cartItem.deleteMany({
      where: {
        cartId: userCart.id,
      },
    });

    //TODO: –æ—Ç–æ—Å–ª–∞—Ç—å –ø–∏—Å—å–º–æ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–ª–∏–µ–Ω—Ç—É
    // –ø–æ–∫–∞ –Ω–µ –¥–µ–ª–∞—é, —Å–µ—Ä–≤–∏—Å ReSend, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∞–≤—Ç–æ—Ä–æ–º,
    // –º–Ω–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç

    //TODO: —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
    // –ø–æ–∫–∞ –Ω–µ –¥–µ–ª–∞—é, —Å–µ—Ä–≤–∏—Å –ÆKassa (yookassa), –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∞–≤—Ç–æ—Ä–æ–º,
    // –º–Ω–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç

    //–ø–æ–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–±—Å—Ç—Ä–∞–∫–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–±—Å—Ç—Ä–∞–∫–Ω—É—é —Å—Å—ã–ª–∫—É
    const paymentData = {
      amount: order.totalAmount,
      orderId: order.id,
      description: '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #' + order.id,
      paymentUrl: 'https://google.com',
    };
    return paymentData.paymentUrl;
  } catch (err) {
    console.log('err: ', err);
  }
}

export async function updateUserInfo(body: Prisma.UserUpdateInput) {
  try {
    const currentUser = await getUserSession();

    if (!currentUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω');
    }

    const findUser = await prisma.user.findFirst({
      where: {
        id: Number(currentUser.id),
      },
    });

    await prisma.user.update({
      where: {
        id: Number(currentUser.id),
      },
      data: {
        fullName: body.fullName,
        email: body.email,
        password: body.password
          ? hashSync(body.password as string, 10)
          : findUser?.password,
      },
    });
  } catch (err) {
    console.log('Error [UPDATE_USER]', err);
    throw err;
  }
}

export async function registerUser(body: Prisma.UserCreateInput) {
  try {
    const user = await prisma.user.findFirst({
      where: {
        email: body.email,
      },
    });

    if (user) {
      if (!user.verified) {
        throw new Error('–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
      }

      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    const createdUser = await prisma.user.create({
      data: {
        fullName: body.fullName,
        email: body.email,
        password: hashSync(body.password, 10),
      },
    });

    const code = Math.floor(100000 + Math.random() * 900000).toString();

    await prisma.verificationCode.create({
      data: {
        code,
        userId: createdUser.id,
      },
    });

    //—Ä–∞—Å—Å—ã–ª–∫–∞ –ø–∏—Å–µ–º –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, —É –º–µ–Ω—è –∏–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏
    //—Å–¥–µ–ª–∞—é –ø–æ–∑–∂–µ
    // await sendEmail(
    //   createdUser.email,
    //   'Next Pizza / üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
    //   VerificationUserTemplate({  // - —ç—Ç–æ —à–∞–±–ª–æ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –ø–∏—Å—å–º–∞
    //     code,
    //   })
    // );
    //–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ—Ç action –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∏—á–µ–≥–æ. —Å—Å—ã–ª–∫–∞ –æ—Ç—Å—ã–ª–∞–µ—Ç—Å—è –ø–∏—Å—å–º–æ–º'
    const verificationUrl = `http://localhost:3000/api/auth/verify?code=${code}`;
    return verificationUrl;
  } catch (err) {
    console.log('Error [CREATE_USER]', err);
    throw err;
  }
}

//—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ —Ç–∞–∫–æ–µ
// export async function createOrder(data: CheckoutFormValues) {
//   console.log(data);

//   const token = '123';

//   await prisma.order.create({
//     data: {
//       token: token,
//       totalAmount: 1500,
//       status: OrderStatus.PENDING,
//       items: [],
//       fullName: data.firstName + ' ' + data.lastName,
//       email: data.email,
//       phone: data.phone,
//       address: data.address,
//       comment: data.comment,
//     },
//   });
// —Ç–∏–ø–∞ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã, –Ω–æ –µ–µ –µ—â–µ –Ω–µ—Ç—É, –Ω—É –ø–æ–∫–∞ –Ω–∞ –≥—É–≥–ª
//   return 'https://google.com';
// }
